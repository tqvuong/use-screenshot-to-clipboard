{"version":3,"sources":["../../dist/esm/utils.js","../../dist/esm/useScreenshot/useScreenshot.js","App.js","../../dist/esm/useScreenshotToClipboard/useScreenshotToClipboard.js","index.js"],"names":["_copyBlobToClipboard","blob","items","_defineProperty","type","clipboardItem","ClipboardItem","navigator","clipboard","write","_htmlToBlob","node","quality","Error","html2canvas","then","canvas","croppedCanvas","document","createElement","croppedCanvasContext","getContext","cropWidth","width","cropHeight","height","drawImage","Promise","resolve","reject","toBlob","_blob","useScreenshot","_ref","_ref$type","_ref$quality","_useState","useState","_useState2","_slicedToArray","error","setError","nameOfDownload","blobImage","arguments","length","undefined","href","URL","createObjectURL","anchorElement","download","body","appendChild","click","removeChild","window","revokeObjectURL","_downloadImage","catch","App","ref","useRef","_useScreenshotToClipb","useScreenshotToClipboard","_useScreenshotToClipb2","makeCopyToClipboard","_useScreenshot","_useScreenshot2","takeScreenShot","React","Fragment","className","onClick","current","result","characters","charactersLength","counter","charAt","Math","floor","random","makeId","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.807f652c.chunk.js","sourcesContent":["import html2canvas from 'html2canvas';\nexport const _copyBlobToClipboard = (blob) => {\n    const items = { [blob.type]: blob };\n    const clipboardItem = new ClipboardItem(items);\n    return navigator.clipboard.write([clipboardItem]);\n};\nexport const _downloadImage = (blobImage, nameOfDownload = 'image.png') => {\n    const href = URL.createObjectURL(blobImage);\n    const anchorElement = document.createElement('a');\n    anchorElement.href = href;\n    anchorElement.download = nameOfDownload;\n    document.body.appendChild(anchorElement);\n    anchorElement.click();\n    document.body.removeChild(anchorElement);\n    window.URL.revokeObjectURL(href);\n};\nexport const _htmlToBlob = (node, type, quality) => {\n    if (!node) {\n        throw new Error('You should provide correct html node.');\n    }\n    return html2canvas(node).then(canvas => {\n        if (!canvas) {\n            throw new Error('canvas is not valid');\n        }\n        const croppedCanvas = document.createElement('canvas');\n        const croppedCanvasContext = croppedCanvas.getContext('2d');\n        if (!croppedCanvasContext) {\n            throw new Error('croppedCanvasContext is not valid');\n        }\n        const cropPositionTop = 0;\n        const cropPositionLeft = 0;\n        const cropWidth = canvas.width;\n        const cropHeight = canvas.height;\n        croppedCanvas.width = cropWidth;\n        croppedCanvas.height = cropHeight;\n        croppedCanvasContext.drawImage(canvas, cropPositionLeft, cropPositionTop);\n        return new Promise((resolve, reject) => {\n            croppedCanvas.toBlob(_blob => {\n                if (_blob) {\n                    resolve(_blob);\n                }\n                else {\n                    reject(new Error('Cannot get blob from image element'));\n                }\n            }, type, quality);\n        });\n    });\n};\n","import { useState } from 'react';\nimport { _htmlToBlob, _downloadImage } from '../utils';\nexport const useScreenshot = ({ type = 'image/png', quality = 1 }) => {\n    const [error, setError] = useState(null);\n    const takeScreenShot = (node, nameOfDownload) => _htmlToBlob(node, type, quality)\n        .then(blob => _downloadImage(blob, nameOfDownload))\n        .catch(setError);\n    return [takeScreenShot, error];\n};\n","import React from 'react';\nimport { useRef } from 'react';\nimport { useScreenshotToClipboard, useScreenshot } from 'use-screenshot-to-clipboard';\n\nconst makeId = length => {\n    let result = '';\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    const charactersLength = characters.length;\n    let counter = 0;\n    while (counter < length) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n        counter += 1;\n    }\n    return result;\n};\n\nconst App = () => {\n    const ref = useRef(null);\n    const [makeCopyToClipboard, _] = useScreenshotToClipboard({ quality: 1 });\n    const [takeScreenShot, __] = useScreenshot({ quality: 1 });\n    return (\n        <>\n            <div className='wrapper' ref={ref}>\n                <table className='styled-table'>\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Points</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>Dom</td>\n                            <td>6000</td>\n                        </tr>\n                        <tr className='active-row'>\n                            <td>Melissa</td>\n                            <td>5150</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <button className='glow-on-hover' type='button' onClick={() => makeCopyToClipboard(ref.current)}>\n                makeCopyToClipboard\n            </button>\n            <button\n                className='glow-on-hover btn-right'\n                type='button'\n                onClick={() => takeScreenShot(ref.current, makeId(8))}\n            >\n                takeScreenShot\n            </button>\n        </>\n    );\n};\nexport default App;\n","import { useState } from 'react';\nimport { _htmlToBlob, _copyBlobToClipboard } from '../utils';\nexport const useScreenshotToClipboard = ({ type = 'image/png', quality = 1 }) => {\n    const [error, setError] = useState(null);\n    const makeCopyToClipboard = (node) => _htmlToBlob(node, type, quality).then(_copyBlobToClipboard).catch(setError);\n    return [makeCopyToClipboard, error];\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}